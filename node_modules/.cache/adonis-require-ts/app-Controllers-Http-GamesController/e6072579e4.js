"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WINNINGS = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
];
class GameController {
    constructor() {
        this.games = new Map();
    }
    async create({ response }) {
        const gameId = Date.now().toString();
        this.games.set(gameId, {
            gameState: Array(9).fill(''),
            currentPlayer: 'X'
        });
        response.status(201).json({ gameId });
    }
    async move({ request, response }) {
        const gameId = request.param('id');
        const { cellIndex } = request.body();
        const game = this.games.get(gameId);
        if (!game || game.gameState[cellIndex] !== '') {
            response.status(400).json({ message: 'Invalid move' });
            return;
        }
        game.gameState[cellIndex] = game.currentPlayer;
        game.currentPlayer = game.currentPlayer === 'X' ? 'O' : 'X';
        const result = this.checkGameState(game.gameState);
        response.json({
            gameState: game.gameState,
            result,
            currentPlayer: game.currentPlayer
        });
    }
    checkGameState(gameState) {
        for (const winCondition of WINNINGS) {
            const [a, b, c] = winCondition;
            const position1 = gameState[a];
            const position2 = gameState[b];
            const position3 = gameState[c];
            if (position1 === '' || position2 === '' || position3 === '') {
                continue;
            }
            if (position1 === position2 && position2 === position3) {
                return {
                    status: 'win',
                    winner: position1
                };
            }
        }
        if (!gameState.includes('')) {
            return { status: 'draw' };
        }
        return { status: 'ongoing' };
    }
}
exports.default = GameController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FtZXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiR2FtZXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsTUFBTSxRQUFRLEdBQUc7SUFDZixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNULENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNULENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNWLENBQUE7QUFFRCxNQUFxQixjQUFjO0lBQW5DO1FBQ1UsVUFBSyxHQUFHLElBQUksR0FBRyxFQUEwRCxDQUFBO0lBNERuRixDQUFDO0lBMURRLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQXVCO1FBQ25ELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDckIsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzVCLGFBQWEsRUFBRSxHQUFHO1NBQ25CLENBQUMsQ0FBQTtRQUVGLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUN2QyxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQzFELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDbEMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUVwQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUVuQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzdDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUE7WUFDdEQsT0FBTTtTQUNQO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFBO1FBQzlDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFBO1FBRTNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRWxELFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDWixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsTUFBTTtZQUNOLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtTQUNsQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRU8sY0FBYyxDQUFDLFNBQW1CO1FBQ3hDLEtBQUssTUFBTSxZQUFZLElBQUksUUFBUSxFQUFFO1lBQ25DLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQTtZQUM5QixNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDOUIsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzlCLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUU5QixJQUFJLFNBQVMsS0FBSyxFQUFFLElBQUksU0FBUyxLQUFLLEVBQUUsSUFBSSxTQUFTLEtBQUssRUFBRSxFQUFFO2dCQUM1RCxTQUFRO2FBQ1Q7WUFFRCxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtnQkFDdEQsT0FBTztvQkFDTCxNQUFNLEVBQUUsS0FBSztvQkFDYixNQUFNLEVBQUUsU0FBUztpQkFDbEIsQ0FBQTthQUNGO1NBQ0Y7UUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMzQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFBO1NBQzFCO1FBRUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQTtJQUM5QixDQUFDO0NBQ0Y7QUE3REQsaUNBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcblxuY29uc3QgV0lOTklOR1MgPSBbXG4gIFswLCAxLCAyXSxcbiAgWzMsIDQsIDVdLFxuICBbNiwgNywgOF0sXG4gIFswLCAzLCA2XSxcbiAgWzEsIDQsIDddLFxuICBbMiwgNSwgOF0sXG4gIFswLCA0LCA4XSxcbiAgWzIsIDQsIDZdXG5dXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDb250cm9sbGVyIHtcbiAgcHJpdmF0ZSBnYW1lcyA9IG5ldyBNYXA8c3RyaW5nLCB7IGdhbWVTdGF0ZTogc3RyaW5nW10sIGN1cnJlbnRQbGF5ZXI6IHN0cmluZyB9PigpXG5cbiAgcHVibGljIGFzeW5jIGNyZWF0ZSh7IHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBnYW1lSWQgPSBEYXRlLm5vdygpLnRvU3RyaW5nKClcbiAgICB0aGlzLmdhbWVzLnNldChnYW1lSWQsIHtcbiAgICAgIGdhbWVTdGF0ZTogQXJyYXkoOSkuZmlsbCgnJyksXG4gICAgICBjdXJyZW50UGxheWVyOiAnWCdcbiAgICB9KVxuXG4gICAgcmVzcG9uc2Uuc3RhdHVzKDIwMSkuanNvbih7IGdhbWVJZCB9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIG1vdmUoeyByZXF1ZXN0LCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgZ2FtZUlkID0gcmVxdWVzdC5wYXJhbSgnaWQnKVxuICAgIGNvbnN0IHsgY2VsbEluZGV4IH0gPSByZXF1ZXN0LmJvZHkoKVxuXG4gICAgY29uc3QgZ2FtZSA9IHRoaXMuZ2FtZXMuZ2V0KGdhbWVJZClcblxuICAgIGlmICghZ2FtZSB8fCBnYW1lLmdhbWVTdGF0ZVtjZWxsSW5kZXhdICE9PSAnJykge1xuICAgICAgcmVzcG9uc2Uuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdJbnZhbGlkIG1vdmUnIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBnYW1lLmdhbWVTdGF0ZVtjZWxsSW5kZXhdID0gZ2FtZS5jdXJyZW50UGxheWVyXG4gICAgZ2FtZS5jdXJyZW50UGxheWVyID0gZ2FtZS5jdXJyZW50UGxheWVyID09PSAnWCcgPyAnTycgOiAnWCdcblxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY2hlY2tHYW1lU3RhdGUoZ2FtZS5nYW1lU3RhdGUpXG5cbiAgICByZXNwb25zZS5qc29uKHtcbiAgICAgIGdhbWVTdGF0ZTogZ2FtZS5nYW1lU3RhdGUsXG4gICAgICByZXN1bHQsXG4gICAgICBjdXJyZW50UGxheWVyOiBnYW1lLmN1cnJlbnRQbGF5ZXJcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0dhbWVTdGF0ZShnYW1lU3RhdGU6IHN0cmluZ1tdKSB7XG4gICAgZm9yIChjb25zdCB3aW5Db25kaXRpb24gb2YgV0lOTklOR1MpIHtcbiAgICAgIGNvbnN0IFthLCBiLCBjXSA9IHdpbkNvbmRpdGlvblxuICAgICAgY29uc3QgcG9zaXRpb24xID0gZ2FtZVN0YXRlW2FdXG4gICAgICBjb25zdCBwb3NpdGlvbjIgPSBnYW1lU3RhdGVbYl1cbiAgICAgIGNvbnN0IHBvc2l0aW9uMyA9IGdhbWVTdGF0ZVtjXVxuXG4gICAgICBpZiAocG9zaXRpb24xID09PSAnJyB8fCBwb3NpdGlvbjIgPT09ICcnIHx8IHBvc2l0aW9uMyA9PT0gJycpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKHBvc2l0aW9uMSA9PT0gcG9zaXRpb24yICYmIHBvc2l0aW9uMiA9PT0gcG9zaXRpb24zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdHVzOiAnd2luJyxcbiAgICAgICAgICB3aW5uZXI6IHBvc2l0aW9uMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFnYW1lU3RhdGUuaW5jbHVkZXMoJycpKSB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6ICdkcmF3JyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgc3RhdHVzOiAnb25nb2luZycgfVxuICB9XG59XG4iXX0=