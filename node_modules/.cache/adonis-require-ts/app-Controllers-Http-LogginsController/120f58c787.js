"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
const Env_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env"));
const Sms_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Mailers/Sms"));
const VerifyEmail_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Mailers/VerifyEmail"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class LogginsController {
    async create({ request, response }) {
        const newUserSchema = Validator_1.schema.create({
            name: Validator_1.schema.string({
                trim: true, escape: true
            }, [
                Validator_1.rules.required(),
                Validator_1.rules.maxLength(100),
                Validator_1.rules.minLength(3)
            ]),
            email: Validator_1.schema.string({
                trim: true
            }, [
                Validator_1.rules.required(),
                Validator_1.rules.email(),
                Validator_1.rules.unique({ table: 'users', column: 'email' })
            ]),
            password: Validator_1.schema.string({
                trim: true
            }, [
                Validator_1.rules.required(),
                Validator_1.rules.minLength(4)
            ]),
            phone: Validator_1.schema.string({
                trim: true, escape: true
            }, [
                Validator_1.rules.required(),
                Validator_1.rules.minLength(10),
                Validator_1.rules.maxLength(10)
            ]),
        });
        const payload = await request.validate({ schema: newUserSchema,
            messages: {
                "name.required": "El nombre es requerido",
                "name.string": "El nombre debe ser un texto",
                "name.minLength": "El nombre debe tener al menos 3 caracteres",
                "name.maxLength": "El nombre debe tener como máximo 100 caracteres",
                "email.required": "El email es requerido",
                "email.string": "El email debe ser un texto",
                "email.email": "El email debe ser un email válido",
                "email.unique": "El email ya está en uso",
                "password.required": "La contraseña es requerida",
                "password.string": "La contraseña debe ser un texto",
                "password.minLength": "La contraseña debe tener al menos 4 caracteres",
                "telefono.required": "El teléfono es requerido",
                "telefono.minLength": "Debe tener al menos 10 caracteres",
                "telefono.maxLength": "Debe tener como máximo 10 caracteres",
            } });
        payload['password'] = await Hash_1.default.make(payload['password']);
        const code = (Math.floor(Math.random() * 8999) - 33).toString();
        payload['code'] = code;
        const user = await User_1.default.create(payload);
        if (user) {
            const signedUrl = Route_1.default.makeSignedUrl('verifyEmail', { id: user.id }, { expiresIn: '30m', prefixUrl: Env_1.default.get('APP_URL') });
            if (signedUrl) {
                const emailMessage = await new VerifyEmail_1.default(user, signedUrl);
                emailMessage.sendLater();
                return response.status(201).send({
                    message: 'Revisa tu correo para activar tu cuenta!',
                    user: user,
                    url: signedUrl
                });
            }
            else {
                return response.status(400).send({
                    message: 'No se pudo enviar el correo de confirmacion'
                });
            }
        }
    }
    async verifyEmail({ response, params }) {
        const user = await User_1.default.findOrFail(params.id);
        if (user.status == true) {
            return response.badRequest({ message: 'Usuario ya activo' });
        }
        else {
            const sms = await new Sms_1.default(user);
            sms.sendLater();
            const signedUrl = Route_1.default.makeSignedUrl('verifyCode', { id: user.id }, { expiresIn: '30m', prefixUrl: Env_1.default.get('APP_URL') });
            return response.ok({ message: 'El correo ha sido enviado a tu celular', url: signedUrl });
        }
    }
    async verifyCode({ request, response }) {
        const newCodeSchema = Validator_1.schema.create({
            code: Validator_1.schema.string({ trim: true, escape: true }, [Validator_1.rules.maxLength(4), Validator_1.rules.minLength(4)])
        });
        const payload = await request.validate({
            schema: newCodeSchema
        });
        const user = await Database_1.default.from('users').where('code', payload['code']).firstOrFail();
        if (user) {
            await Database_1.default.from('users').where('id', user.id).update({ status: true });
            return response.ok({ message: 'El usuario ha sido dado de alta de manera satisfactoria' });
        }
        else {
            return response.badRequest({ message: 'Este codigo no es valido' });
        }
    }
    async login({ request, response, auth }) {
        const newLogginSchema = Validator_1.schema.create({
            email: Validator_1.schema.string({
                trim: true
            }, [
                Validator_1.rules.required(),
                Validator_1.rules.email(),
                Validator_1.rules.exists({ table: 'users', column: 'email' })
            ]),
            password: Validator_1.schema.string({
                trim: true
            }, [
                Validator_1.rules.required(),
                Validator_1.rules.minLength(4)
            ]),
        });
        const payload = await request.validate({ schema: newLogginSchema,
            messages: {
                "email.required": "El email es requerido",
                "email.email": "El email debe ser un email válido",
                "email.exist": "El email debe haber sido registrado",
                "password.required": "La contraseña es requerida",
                "password.minLength": "La contraseña debe tener al menos 4 caracteres"
            }
        });
        const user = await User_1.default.findBy('email', payload['email']);
        if (user?.status == false) {
            return response.status(401).send({ error: [{ message: 'Usuario no activado' }] });
        }
        else if (user?.status == true) {
            const comparacionPassword = await Hash_1.default.verify(user.password, payload['password']);
            if (comparacionPassword) {
                const token = await auth.use('api').attempt(payload['email'], payload['password']);
                return response.ok({ token });
            }
            else {
                return response.status(401).send({ error: [{ message: 'Contraseña incorrecta' }] });
            }
        }
    }
    async logout({ auth, response }) {
        await auth.logout();
        return response.status(200).send({ message: 'Sesión cerrada' });
    }
}
exports.default = LogginsController;
//# sourceMappingURL=data:application/json;base64,